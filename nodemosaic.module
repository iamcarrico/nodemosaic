<?php
/**
 * Implements hook_help.
 *
 * Displays help and module information.
 *
 * @param path 
 *   Which path of the site we're using to display help
 * @param arg 
 *   Array that holds the current path as returned from arg() function
 */
function nodemosaic_help($path, $arg) {
	switch ($path) {
		case "admin/help#nodemosiac":
			return '<p>'.  t("Displays node tiles in a grid, handles certain field rules") .'</p>';
			break;
	}
}

/**
 * Implements hook_block_info().
 */
function nodemosaic_block_info() {
  $blocks['nodemosaic_block'] = array(
    'info' => t('Mosaic Display'), //The name that will appear in the block list.
    'cache' => DRUPAL_CACHE_PER_ROLE, //Default
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function nodemosaic_block_view($delta = '') {
	switch($delta){
		case 'nodemosaic_block':
			$block['subject'] = t('Mosaic Display');
			if(user_access('access content')){
				$block['content'] = '<div id="nodemosaic-viewport"><div id="nodemosaic-wall"></div></div>';
			}
			break;
	}
	return $block;
}

function nodemosaic_init() {
	/* We need jQuery.ui Draggable for the mosaic tile. */
	drupal_add_library('system', 'ui.draggable');
}

function nodemosaic_field_access($op, $field, $entity_type, $entity, $account) {
	/* When a tile is created, the row and column should be editable; once the
	tile has been created, they should not change. Here, we identify those fields
	and return empty($entity->nid) for access to those fields. That function would
	return true for a new node (the node doesn't exist so NID would be empty) and
	returns false for an existing node (when these values should not be allowed
	to change). */
	if ($op == 'edit' && $field['field_name'] == 'field_tilerow') { return empty($entity->nid); }
	if ($op == 'edit' && $field['field_name'] == 'field_tilecol') { return empty($entity->nid); }
}